import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
import aiohttp
from aiogram import F
from aiohttp import web
from aiohttp.web_request import Request


TOKEN = os.getenv('BOT_TOKEN')
GSHEETS_URL = os.getenv('GSHEETS_URL')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', 8000))


if not TOKEN:
    raise ValueError('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
if not GSHEETS_URL:
    raise ValueError('GSHEETS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# ========================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ========================
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –£—Å–ª—É–≥–∏")],
        [KeyboardButton(text="üñ• –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)


# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ========================
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )


@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        parse_mode="HTML",
        reply_markup=main_menu
    )


@dp.message(Command("status"))
async def status_command(message: types.Message):
    await message.answer(
        "‚úÖ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
        "üåê –°–µ—Ä–≤–µ—Ä: Heroku\n"
        "üîÑ –†–µ–∂–∏–º: Webhook\n"
        "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ê–∫—Ç–∏–≤–µ–Ω\n"
        "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7",
        parse_mode="HTML"
    )


# ========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
# ========================
@dp.message(F.text == "üìä –£—Å–ª—É–≥–∏")
async def show_services(message: types.Message):
    await message.answer(
        "üí∞ <b>–ú–æ–∏ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:</b>\n\n"
        "üìä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö ‚Äî –æ—Ç 3 000‚ÇΩ\n"
        "   ‚Ä¢ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–æ–≤\n"
        "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤\n"
        "   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n\n"
        "üìã –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Excel ‚Äî –æ—Ç 1 000‚ÇΩ\n"
        "   ‚Ä¢ –ú–∞–∫—Ä–æ—Å—ã –∏ —Ñ–æ—Ä–º—É–ª—ã\n"
        "   ‚Ä¢ –ê–≤—Ç–æ–æ—Ç—á–µ—Ç—ã\n"
        "   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏\n\n"
        "ü§ñ Telegram-–±–æ—Ç ‚Äî –æ—Ç 8 000‚ÇΩ\n"
        "   ‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n"
        "   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API\n"
        "   ‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "üìù <i>–ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω, —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.</i>",
        parse_mode="HTML"
    )


@dp.message(F.text == "üñ• –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
async def show_portfolio(message: types.Message):
    await message.answer(
        "üìÇ <b>–ú–æ–∏ —Ä–∞–±–æ—Ç—ã:</b>\n\n"
        "üîó GitHub: github.com/your_profile\n"
        "üìπ –í–∏–¥–µ–æ-–¥–µ–º–æ: youtu.be/demo\n"
        "üíº LinkedIn: linkedin.com/in/yourprofile\n\n"
        "üèÜ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n"
        "‚Ä¢ 50+ –±–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ 30+ –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ 20+ Excel –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π\n\n"
        "‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: 4.9/5\n"
        "üîç <i>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ –æ—Ç–∑—ã–≤—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –≤—ã—à–µ.</i>",
        parse_mode="HTML"
    )


@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    await message.answer(
        "üìû <b>–ö–∞–∫ —Å–æ –º–Ω–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è:</b>\n\n"
        "üì± Telegram: @JProj_174\n"
        "üìß Email: Projman174@yandex.ru\n"
        "üåê –°–∞–π—Ç: yourwebsite.com\n"
        "‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00-18:00 –ú–°–ö\n\n"
        "‚ö° <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b>\n"
        "‚Ä¢ –í —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: 1-2 —á–∞—Å–∞\n"
        "‚Ä¢ –í–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤: –¥–æ 8 —á–∞—Å–æ–≤\n"
        "‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: –¥–æ 24 —á–∞—Å–æ–≤\n\n"
        "üí¨ <i>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</i>",
        parse_mode="HTML"
    )


# ========================
# –°–ò–°–¢–ï–ú–ê –ó–ê–ö–ê–ó–û–í
# ========================
@dp.message(F.text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å")
async def start_order(message: types.Message):
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç 3 000‚ÇΩ)", callback_data="order_parse")],
            [InlineKeyboardButton(text="üìã –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Excel (–æ—Ç 1 000‚ÇΩ)", callback_data="order_excel")],
            [InlineKeyboardButton(text="ü§ñ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞ (–æ—Ç 8 000‚ÇΩ)", callback_data="order_bot")],
            [InlineKeyboardButton(text="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="order_consultation")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ]
    )
    await message.answer(
        "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
        reply_markup=inline_kb,
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("order_"))
async def process_order(callback: types.CallbackQuery):
    service_map = {
        "order_parse": ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö", 3000, "üìä"),
        "order_excel": ("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Excel", 1000, "üìã"),
        "order_bot": ("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞", 8000, "ü§ñ"),
        "order_consultation": ("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", 0, "üí¨")
    }

    if callback.data not in service_map:
        await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    service, price, emoji = service_map[callback.data]

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    order_data = {
        "client_name": callback.from_user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "client_id": str(callback.from_user.id),
        "service": service,
        "price": price,
        "status": "–ù–æ–≤—ã–π",
        "username": callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
        "comment": f"–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ –≤ {callback.message.date}"
    }

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: {service} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    GSHEETS_URL,
                    json=order_data,
                    headers={
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                response_text = await response.text()
                logger.info(f"Google Sheets –æ—Ç–≤–µ—Ç: {response.status} - {response_text}")

                if response.status in [200, 302]:  # 302 - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è GAS
                    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", show_alert=False)

                    price_text = f"–æ—Ç {price:,}‚ÇΩ" if price > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"

                    await callback.message.edit_text(
                        f"{emoji} <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['client_name']}\n"
                        f"üîß <b>–£—Å–ª—É–≥–∞:</b> {service}\n"
                        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {callback.message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"üìû <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
                        f"–Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è:\n"
                        f"‚Ä¢ –£—Ç–æ—á–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n"
                        f"‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¢–ó\n"
                        f"‚Ä¢ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤\n\n"
                        f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!",
                        parse_mode="HTML"
                    )
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç Google Sheets: {response.status}")
                    raise aiohttp.ClientError(f"HTTP {response.status}")

    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets")
        await callback.answer("‚ö† –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è", show_alert=True)
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º</b>\n\n"
            "–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–ø—Ä—è–º—É—é:\n\n"
            "üì± Telegram: @your_username\n"
            "üìß Email: your@email.com",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)[:100]}...\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–ø—Ä—è–º—É—é:\n"
            "üì± Telegram: @your_username\n"
            "üìß Email: your@email.com\n\n"
            "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º –≤–∞–º!",
            parse_mode="HTML"
        )


# ========================
# –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ========================
@dp.message()
async def handle_unknown_message(message: types.Message):
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        reply_markup=main_menu
    )


# ========================
# WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö
# ========================
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}", exc_info=True)
        return web.Response(status=500, text="Error")


async def health_check(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return web.Response(text="Bot is running!", content_type="text/plain")


# ========================
# –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK
# ========================
async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Heroku"""
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.delete_webhook(drop_pending_updates=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot.set_webhook(webhook_url)

        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
        webhook_info = await bot.get_webhook_info()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å webhook: {webhook_info}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        raise


# ========================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# ========================
@dp.error()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {event.exception}", exc_info=True)

    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ callback query
    if hasattr(event, 'update') and event.update.callback_query:
        try:
            await event.update.callback_query.answer(
                "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
        except Exception:
            pass

    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    elif hasattr(event, 'update') and event.update.message:
        try:
            await event.update.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=main_menu
            )
        except Exception:
            pass


# ========================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ========================
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –Ω–∞ Heroku...")

    try:
        if WEBHOOK_URL:
            # –†–µ–∂–∏–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (Heroku)
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook")

            await setup_webhook()

            # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()
            app.router.add_post('/webhook', webhook_handler)
            app.router.add_get('/health', health_check)
            app.router.add_get('/', health_check)  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Heroku

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            runner = web.AppRunner(app)
            await runner.setup()

            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()

            logger.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            logger.info(f"üîó Health check: {WEBHOOK_URL}/health")

            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

        else:
            # –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
            await bot.delete_webhook(drop_pending_updates=True)
            await dp.start_polling(bot, skip_updates=True)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        raise
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)